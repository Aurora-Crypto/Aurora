generator client {
    provider = "prisma-client-js"
}

generator jsonSchema {
    provider              = "prisma-json-schema-generator"
    output                = "../docs/schemas"
    includeRequiredFields = "true"
}

datasource db {
    provider = "mongodb"
    url      = env("DB_URL")
}

model Wallet {
    address     String   @id @map("_id")
    seedPhrase  String?  @default("")
    rdUserIds   String[] @db.ObjectId // read-only
    rdUsers     User[]   @relation(fields: [rdUserIds], references: [id], name: "readOnly")
    rdwrUserIds String[] @db.ObjectId // read-write
    rdwrUsers   User[]   @relation(fields: [rdwrUserIds], references: [id], name: "readWrite")
}

type Transaction {
    id               String   @default(uuid())
    hash             String?
    date             DateTime @default(now())
    receivedQuantity Float    @default(0)
    receivedCurrency String   @default("")
    sentQuantity     Float    @default(0)
    sentCurrency     String   @default("")
    feeAmount        Float    @default(0)
    feeCurrency      String   @default("")
    tag              String?  @default("PAYMENT")
}

type WalletName {
    address String
    name    String
}

model User {
    id                  String        @id @default(auto()) @map("_id") @db.ObjectId
    email               String        @unique
    name                String?
    processorAPIKeys    String[]
    exchangeAPIKeys     String[]
    rdWalletAddresses   String[]      @unique // read-only
    rdWallets           Wallet[]      @relation(fields: [rdWalletAddresses], references: [address], name: "readOnly")
    rdwrWalletAddresses String[]      @unique // read-write
    rdwrWallets         Wallet[]      @relation(fields: [rdwrWalletAddresses], references: [address], name: "readWrite")
    walletNames         WalletName[]
    transactions        Transaction[]

    @@index([transactions.id, transactions.hash])
}
